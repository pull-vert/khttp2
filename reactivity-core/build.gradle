repositories {
    // TODO remove when dev is done, used only for accessing code
    maven { setUrl("http://repo.spring.io/milestone") }
}

dependencies {
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-reactive:0.18"
    // uncomment if need for atomicfu dependency
    compile("org.jetbrains.kotlinx:atomicfu:0.6") {
        exclude module: "kotlin-stdlib-jre8" //exclude by artifact name
    }
    // Reactive Streams
    compile "org.reactivestreams:reactive-streams:1.0.1"
    testCompile "org.reactivestreams:reactive-streams-tck:1.0.1"

    // TODO remove when dev is done, used only for accessing code
    testCompile "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:0.18"
    testCompile "org.jetbrains.kotlinx:kotlinx-coroutines-reactor:0.18"
    testCompile "io.projectreactor:reactor-core:3.1.0.RC1"
}

// Compile & Test with Java 6
// https://docs.gradle.org/4.2-rc-1/userguide/java_plugin.html#sec:java_cross_compilation
assert hasProperty('javaHome'): "Set the property 'javaHome' in your your gradle.properties pointing to a Java 6 or 7 installation"
assert hasProperty('targetJavaVersion'): "Set the property 'targetJavaVersion' in your your gradle.properties to '1.6' or '1.7'"

sourceCompatibility = targetJavaVersion

def javaExecutablesPath = new File(javaHome, 'bin')
def javaExecutables = [:].withDefault { execName ->
    def executable = new File(javaExecutablesPath, execName)
    assert executable.exists(): "There is no ${execName} executable in ${javaExecutablesPath}"
    executable
}
tasks.withType(AbstractCompile) {
    options.with {
        fork = true
        forkOptions.javaHome = file(javaHome)
    }
}
tasks.withType(Javadoc) {
    executable = javaExecutables.javadoc
}
tasks.withType(Test) {
    executable = javaExecutables.java
}
tasks.withType(JavaExec) {
    executable = javaExecutables.java
}