import org.jetbrains.kotlin.config.KotlinCompilerVersion

allprojects {
    group 'io.reactivity'
    def deployVersion = properties['DeployVersion']
    if (deployVersion != null) version = deployVersion
}

buildscript {
    repositories {
        jcenter()
        // needed for atomicfu dependency
//        maven { url "http://kotlin.bintray.com/kotlinx" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://dl.bintray.com/jetbrains/kotlin-native-dependencies" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
//        classpath "org.jetbrains.kotlinx:atomicfu-gradle-plugin:$atomicFU_version"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintray_version"
        classpath "com.moowork.gradle:gradle-node-plugin:$gradle_node_version"
        classpath "org.jetbrains.kotlin:kotlin-native-gradle-plugin:$kotlin_native_version"
    }
}

// Report Kotlin compiler version when building project
println("Using Kotlin compiler version: $KotlinCompilerVersion.VERSION")

// --------------- Configure sub-projects with Kotlin sources ---------------

static def platformOf(project) {
    if (project.name.endsWith("-common")) return "common"
    if (project.name.endsWith("-js")) return "js"
    if (project.name.endsWith("-native")) return "native"
    return "jvm"
}

static def platformLib(base, platform) {
    if (platform == "jvm") return base
    return "$base-$platform"
}

configure(subprojects.findAll { !it.name.endsWith("-native") }) {
    def platform = platformOf(it)
    apply plugin: "kotlin-platform-$platform"

    if (platform == "jvm") {
        sourceCompatibility = 1.6
        targetCompatibility = 1.6

        tasks.withType(JavaCompile) {
            options.encoding = 'UTF-8'
        }
    }

    kotlin.experimental.coroutines "enable"

    if (platform == "js") {
        tasks.withType(compileKotlin2Js.getClass()) {
            kotlinOptions {
                moduleKind = "umd"
                sourceMap = true
                metaInfo = true
            }
        }
    }

    tasks.withType(Test) {
        testLogging {
            showStandardStreams = true
            events "passed", "failed"
        }
//        def stressTest = project.properties['stressTest']
//        if (stressTest != null) systemProperties['stressTest'] = stressTest
    }

    repositories {
        jcenter()
//        maven { url "http://kotlin.bintray.com/kotlinx" }
        maven { url "https://dl.bintray.com/devexperts/Maven/" }
    }

    def kotlin_stdlib = platformLib("kotlin-stdlib", platform)
    def kotlin_test = platformLib("kotlin-test", platform)

    dependencies {
        compile "org.jetbrains.kotlin:$kotlin_stdlib:$kotlin_version"
        testCompile "org.jetbrains.kotlin:$kotlin_test:$kotlin_version"
    }

    if (platform == "common") {
        dependencies {
            testCompile "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
        }
    }

    if (platform == "jvm") {
        dependencies {
            testCompile "junit:junit:$junit_version"
            testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
        }
    }
}

//// --------------- Configure sub-projects that use atomicFU ---------------
//def withAtomicFU = 'reactivity'
//
//configure(subprojects.findAll { it.name.contains(withAtomicFU) && platformOf(it) == "jvm"}) {
//    apply plugin: 'kotlinx-atomicfu'
//
//    dependencies {
//        compileOnly "org.jetbrains.kotlinx:atomicfu:$atomicFU_version"
//        testCompile "org.jetbrains.kotlinx:atomicfu:$atomicFU_version"
//    }
//
//    atomicFU {
//        inputFiles = sourceSets.main.output.classesDirs
//        outputDir = file("$buildDir/classes-atomicfu/main")
//        classPath = sourceSets.main.runtimeClasspath
//    }
//
//    jar {
//        mainSpec.sourcePaths.clear() // hack to clear existing paths
//        from files(atomicFU.outputs, sourceSets.main.output.resourcesDir)
//    }
//
//    test {
//        classpath = files(configurations.testRuntime, atomicFU.outputs, sourceSets.test.output.classesDirs,
//                sourceSets.main.output.resourcesDir)
//    }
//}

// --------------- Configure between subprojects dependencies ---------------
configure(subprojects.findAll { it.name.contains('reactivity') && !it.name.endsWith("-common") && !it.name.endsWith("-native") }) {
    def platform = platformOf(it)
    def reactivity = platformLib("reactivity", platform)

    if (it.name == reactivity) {
        dependencies {
            expectedBy project(':reactivity-common')
        }
    } else {
        dependencies {
            compile project(":$reactivity")
            //the only way IDEA can resolve test classes
            testCompile project(":$reactivity").sourceSets.test.output
        }
    }
}

// --------------- Configure sub-projects that are published ---------------

configure(subprojects.findAll { !it.name.endsWith("-native") }) {
    apply from: rootProject.file('gradle/dokka.gradle')
    apply from: rootProject.file('gradle/publish-bintray.gradle')
}

//subprojects {
//    def platform = platformOf(it)
//    def reactivity = platformLib("reactivity", platform)
//
//    if (it.name != reactivity) {
//        dokka.dependsOn project(":$reactivity").dokka
//
//        tasks.withType(dokka.getClass()) {
//            externalDocumentationLink {
//                url = new URL(core_docs_url)
//                packageListUrl = new URL("file://$core_docs_file")
//            }
//        }
//    }
//
//    if (platform == "jvm") {
//        dokkaJavadoc.dependsOn project(":$reactivity").dokka
//    }
//}

apply plugin: 'base'

clean.dependsOn gradle.includedBuilds.collect { it.task(':clean') }